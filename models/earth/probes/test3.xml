<?xml version="1.0" encoding="utf-8"?>
<v:probe name="Test3" xmlns:v="venus">
<flight>
<tournament>tournament</tournament>
<planet name="Earth"/>
<time start="2015-01-01 00:00:00"/>
<T_start>290.000000</T_start>
<mission type="test3">
<control_stations>
        <control_station name="НИП">
                <location_angle>337.000000</location_angle>
        </control_station>
</control_stations>
<duration>6.000000</duration>
<orbit>600.000000</orbit>
<start_angular_velocity>1.000000</start_angular_velocity>
<target_orbit>700</target_orbit>
</mission>
</flight>
<construction>
  <fuel>0.5</fuel>
  <voltage>27.000000</voltage>
  <xz_yz_solar_panel_fraction>100</xz_yz_solar_panel_fraction>
  <xz_yz_radiator_fraction>0</xz_yz_radiator_fraction>
  <xy_radiator_fraction>40</xy_radiator_fraction>
</construction>
<systems>
  <system name="Cubesat-Case-6U"/>
  <system name="Orient-1" start_mode="ON"/>
  <system name="Telemetry-1" start_mode="ON"/>
  <system name="Navi-1" start_mode="ON"/>
  <system name="Power-1" start_mode="ON"/>
  <system name="Therm-1" start_mode="ON"/>	  
  <system name="Engine-1-1" start_mode="ON"/>
  <system name="CPU-1" start_mode="ON">
<program>
<![CDATA[
import math

fuel_mass = 0.5
total_mass = 6.4 + fuel_mass
volume = 6.8
u = 2790.0
G = 6.6742e-11
R_z = 6371032.0
M_z = 5.9726e24
target_height = 700.0 * 1000.0
R1 = R_z + 600.0 * 1000.0
R2 = R_z + target_height
M1 = 0.00002
M2 = 0.00001
Traction = 0.009
dw = 0.00001

dv1 = math.sqrt(G * M_z / R1) * (math.sqrt(2 * R2 / (R1 + R2)) - 1)
dv2 = math.sqrt(G * M_z / R2) * (1 - math.sqrt(2 * R1 / (R1 + R2)))
dv = dv1 + dv2
need_fuel = total_mass * (1 - math.exp(-dv / u))

a = math.pow(volume, 1/3.0) / 10
I = (1/12.0) * (2.0 * a ** 2) * total_mass

av = sputnik.orientation.get_angular_velocity(AXIS_Z)
aa = av ** 2 / ((180 + 360 * 3) * 2)
t0 = av / aa
M0 = I * aa

moment = False

stage = -2

sputnik.telemetry.set_period(60)

while sputnik.cpu.run():
    if stage == -2:
        sputnik.orientation.set_motor_moment(AXIS_Z, -M0)
        sputnik.orientation.start_motor(AXIS_Z)
        stage = -1
        sputnik.telemetry.send_message('STAGE -1')
    elif stage == -1:
        t = sputnik.cpu.get_flight_time()
        if t >= t0:
            sputnik.orientation.stop_motor(AXIS_Z)
            stage = 0
            sputnik.telemetry.send_message('STAGE 0')
    elif stage == 0:
        na = sputnik.navigation.get_z_axis_angle()
        if na >= 180:
            start_velocity = sputnik.navigation.get_transversal_velocity()
            sputnik.engine.set_traction(Traction)
            sputnik.engine.start_engine()
            stage = 1
            sputnik.telemetry.send_message('STAGE 1')
    elif stage == 1:
        v = sputnik.navigation.get_transversal_velocity()
        if abs(v - start_velocity) > dv1:
            sputnik.engine.stop_engine()
            stage = 2
    elif stage == 2:
        sputnik.orientation.set_motor_moment(AXIS_Z, M1)
        sputnik.orientation.start_motor(AXIS_Z)
        stage = 3
    elif stage == 3:
        oa = sputnik.orientation.get_angle(AXIS_Z)
        if oa >= 270:
            sputnik.orientation.set_motor_moment(AXIS_Z, -M1)
            stage = 4
    elif stage == 4:
        oa = sputnik.orientation.get_angle(AXIS_Z)
        if oa >= 359.9 or oa <= 0.1:
            sputnik.orientation.stop_motor(AXIS_Z)   
            h = 0.0     
            stage = 5
            moment = False
    else:
        av = sputnik.orientation.get_angular_velocity(AXIS_Z)
        if abs(av) < dw:
            if moment:
                sputnik.orientation.stop_motor(AXIS_Z)
                moment = False
        else:
            if not moment:
                sputnik.orientation.start_motor(AXIS_Z)
                moment = True
            if av > 0:
                sputnik.orientation.set_motor_moment(AXIS_Z, -M2)
            else:
                sputnik.orientation.set_motor_moment(AXIS_Z, M2)

        if stage == 5:
            prev_h = h
            h = sputnik.navigation.get_orbit_height()
            if h <= prev_h:
                start_velocity = sputnik.navigation.get_transversal_velocity()
                sputnik.engine.start_engine()
                stage = 6
        elif stage == 6:
            v = sputnik.navigation.get_transversal_velocity()
            if abs(v - start_velocity) > dv2:
                sputnik.engine.stop_engine()
                stage = 7
]]></program>
</system>
</systems>
</v:probe>
