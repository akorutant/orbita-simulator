<?xml version="1.0" encoding="utf-8"?>
<v:probe name="EW-x" xmlns:v="venus">
<flight>
<tournament>tournament</tournament>
<planet name="Earth"/>
<time start="2015-01-01 00:00:00"/>
<T_start>290.000000</T_start>
<mission type="early_warning">
<control_stations>
        <control_station name="GS-West">
                <location_angle>320.000000</location_angle>
        </control_station>
        <control_station name="GS-East">
                <location_angle>40.000000</location_angle>
        </control_station>
</control_stations>
<duration>72.000000</duration>
<missiles>
    <missile index="1">
        <location_angle>6.000000</location_angle>
        <launch_time>74249.000000</launch_time>
    </missile>
    <missile index="2">
        <location_angle>40.000000</location_angle>
        <launch_time>7151.000000</launch_time>
    </missile>
    <missile index="3">
        <location_angle>14.000000</location_angle>
        <launch_time>183518.000000</launch_time>
    </missile>
    <missile index="4">
        <location_angle>24.000000</location_angle>
        <launch_time>231593.000000</launch_time>
    </missile>
    <missile index="5">
        <location_angle>40.000000</location_angle>
        <launch_time>45911.000000</launch_time>
    </missile>
    <missile index="6">
        <location_angle>353.000000</location_angle>
        <launch_time>71560.000000</launch_time>
    </missile>
    <missile index="7">
        <location_angle>351.000000</location_angle>
        <launch_time>77672.000000</launch_time>
    </missile>
    <missile index="8">
        <location_angle>348.000000</location_angle>
        <launch_time>103763.000000</launch_time>
    </missile>
    <missile index="9">
        <location_angle>355.000000</location_angle>
        <launch_time>38538.000000</launch_time>
    </missile>
    <missile index="10">
        <location_angle>1.000000</location_angle>
        <launch_time>57908.000000</launch_time>
    </missile>
</missiles>
<orbit>35794.000000</orbit>
<resolution>0.000000</resolution>
<start_angular_velocity>1.000000</start_angular_velocity>
</mission>
</flight>
<construction>
  <fuel>0.000000</fuel>
  <voltage>27.000000</voltage>
  <xz_yz_solar_panel_fraction>100.000000</xz_yz_solar_panel_fraction>
  <xz_yz_radiator_fraction>0.000000</xz_yz_radiator_fraction>
  <xy_radiator_fraction>75.000000</xy_radiator_fraction>
</construction>
<systems>
  <system name="MiniSat-Case"/>
  <system name="Therm-4" start_mode="ON"/>
  <system name="Navi-1" start_mode="ON"/>
  <system name="Orient-4" start_mode="ON"/>
  <system name="CPU-2" start_mode="ON">
<program>
<![CDATA[
initial_height = 35794000.0

ground_station_angle = 0.0

angle_offset = 6.0
scanning_period = 140.0

G = 6.6742e-11
earth_mass = 5.9726e24
earth_radius = 6371032.0
earth_rotation_period = 86164.1

max_orientation_torsion = 0.25

heater_power = 100

angular_velocity_precision = 2e-3
orient_angle_precision = 5e-3
navig_angle_precision = 5e-3
coord_precision = 1e-2

def normalize_angle(angle):
    normalized_angle = angle
    while normalized_angle < 0:
        normalized_angle += 360
    while normalized_angle >= 360:
        normalized_angle -= 360
    return normalized_angle

def normalize_angle_difference(angle_difference):
    normalized_angle_difference = angle_difference
    while normalized_angle_difference < -180:
        normalized_angle_difference += 360
    while normalized_angle_difference >= 180:
        normalized_angle_difference -= 360
    return normalized_angle_difference

class DampingMode(object):
    def __init__(self):
        self.enabled = False
        self.active = False
        self.desired_angular_velocity = 0.0

    def run(self):
        if self.enabled:
            angular_velocity = sputnik.orientation.get_angular_velocity(AXIS_Z)
            if abs(angular_velocity - self.desired_angular_velocity) > angular_velocity_precision:
                if not self.active:
                    self.active = True
                    if angular_velocity > self.desired_angular_velocity:
                        torsion = -max_orientation_torsion
                    else:
                        torsion = max_orientation_torsion
                    sputnik.orientation.start_motor(AXIS_Z)
                    sputnik.orientation.set_motor_moment(AXIS_Z, torsion)
            elif self.active:
                sputnik.orientation.stop_motor(AXIS_Z)
                self.active = False

damping_mode = DampingMode()

class OrientationMode(object):
    def __init__(self):
        self.enabled = False
        self.active = False
        self.differential = True
        self.desired_angle = 0.0
        self.desired_angular_velocity = 0.0
        self.max_angular_acceleration = 0.0
        self.inertia_moment = 0.0

    def run(self):
        if self.enabled:
            angle = sputnik.orientation.get_angle(AXIS_Z)
            angular_velocity = sputnik.orientation.get_angular_velocity(AXIS_Z)
            desired_angle_change = normalize_angle_difference(self.desired_angle - angle)
            if ((abs(angular_velocity - self.desired_angular_velocity) > angular_velocity_precision) or
                (abs(desired_angle_change) > orient_angle_precision)):
                proportional_coefficient = 8 * self.max_angular_acceleration / 180
                differential_coefficient = 8 * math.sqrt(self.max_angular_acceleration / 360)
                angular_acceleration = desired_angle_change * proportional_coefficient
                if self.differential:
                    angular_acceleration -= (angular_velocity - self.desired_angular_velocity) * differential_coefficient
                torsion = self.inertia_moment * angular_acceleration
                if torsion > max_orientation_torsion:
                    torsion = max_orientation_torsion
                if torsion < -max_orientation_torsion:
                    torsion = -max_orientation_torsion
                sputnik.orientation.set_motor_moment(AXIS_Z, torsion)
                if not self.active:
                    self.active = True
                    sputnik.orientation.start_motor(AXIS_Z)
            elif self.active:
                sputnik.orientation.stop_motor(AXIS_Z)
                self.active = False

orientation_mode = OrientationMode()

class TrackingMode(object):
    def __init__(self):
        self.enabled = False
        self.active = False
        self.prev_flight_time = None
        self.prev_nav_angle = None

    def run(self):
        if self.enabled:
            flight_time = sputnik.cpu.get_flight_time()
            nav_angle = sputnik.navigation.get_z_axis_angle()
            if self.prev_flight_time is not None:
                tick = flight_time - self.prev_flight_time
                desired_angular_velocity = -1.0 * normalize_angle_difference(nav_angle - self.prev_nav_angle) / tick
            else:
                desired_angular_velocity = 0.0
            self.prev_flight_time = flight_time
            self.prev_nav_angle = nav_angle
            #orientation_mode.desired_angle = normalize_angle(270 - nav_angle)
            orientation_mode.desired_angle = normalize_angle((270 - nav_angle) - angle_offset)
            orientation_mode.desired_angular_velocity = desired_angular_velocity
            if not self.active:
                self.active = True

tracking_mode = TrackingMode()

class ScanningMode(object):
    def __init__(self):
        self.enabled = False
        self.active = False

    def run(self):
        if self.enabled:
            flight_time = sputnik.cpu.get_flight_time()
            angle = sputnik.orientation.get_angle(AXIS_Z)
            nav_angle = sputnik.navigation.get_z_axis_angle()
            angular_acceleration = (2 * math.pi / scanning_period) ** 2 * normalize_angle_difference((270 - nav_angle) - angle)
            torsion = orientation_mode.inertia_moment * angular_acceleration
            if torsion > max_orientation_torsion:
                torsion = max_orientation_torsion
            if torsion < -max_orientation_torsion:
                torsion = -max_orientation_torsion
            sputnik.orientation.set_motor_moment(AXIS_Z, torsion)
            if not self.active:
                self.active = True
                sputnik.orientation.start_motor(AXIS_Z)

scanning_mode = ScanningMode()

state = 0

heating = False

sputnik.telemetry.set_period(60)

while sputnik.cpu.run():
    damping_mode.run()
    orientation_mode.run()
    tracking_mode.run()
    scanning_mode.run()

    temperature = sputnik.heat_control.get_temperature()
    if (temperature < 285) and not heating:
        heating = True
        sputnik.heat_control.set_power(heater_power)
        sputnik.heat_control.start_heating()
    elif (temperature > 300) and heating:
        heating = False
        sputnik.heat_control.set_power(0)
        sputnik.heat_control.stop_heating()

    if state == 0:
        sputnik.telemetry.set_state(STATE_ON)
        sputnik.navigation.set_state(STATE_ON)
        sputnik.orientation.set_state(STATE_ON)
        sputnik.heat_control.set_state(STATE_ON)
        initial_angular_velocity = sputnik.orientation.get_angular_velocity(AXIS_Z)
        flight_time = sputnik.cpu.get_flight_time()
        stabilization_begin_time = flight_time
        damping_mode.enabled = True
        state = 1
        continue

    if (state == 1) and not damping_mode.active:
        damping_mode.enabled = False
        orientation_mode.max_angular_acceleration = abs(initial_angular_velocity) / (sputnik.cpu.get_flight_time() - stabilization_begin_time)
        orientation_mode.inertia_moment = max_orientation_torsion / orientation_mode.max_angular_acceleration
        state = 10
        continue

    if state == 10:
        tracking_mode.enabled = True
        state = 11
        continue

    if (state == 11) and tracking_mode.active:
        orientation_mode.enabled = True
        state = 12
        continue

    if (state == 12) and not orientation_mode.active:
        tracking_mode.enabled = False
        orientation_mode.enabled = False
        scanning_mode.enabled = True
        state = 20
        continue

    if state == 20:
        slot = sputnik.camera.take_photo()
        if slot is not None:
            sputnik.transmitter.send_photo(slot)
        continue
]]></program>
</system>
<system name="Power-4" start_mode="ON"/>
<system name="Radio-4" start_mode="ON"/>
<system name="Telemetry-1" start_mode="ON"/>
<system name="Infrared-Telescope" start_mode="ON"/>
</systems>
</v:probe>
